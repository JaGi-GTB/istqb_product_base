\NeedsTeXFormat{LaTeX2e}
\ProvidesExplPackage
  {markdownthemeistqb_syllabus}%
  {2023-06-18}%
  {0.0.1}%
  {LaTeX theme for the Markdown Package that typesets ISTQB Syllabi}

% Hybrid Markdown + LaTeX text
\markdownSetup{
  rawAttribute,
}

% Lists
\markdownSetup{
  hashEnumerators,
}

% Metadata
\markdownSetupSnippet
  { metadata }
  {
    jekyllData,
    expectJekyllData,
    jekyllDataRenderers = {
      schema = {
        \str_gset:Nn
          \g_istqb_schema_str
          { #1 }
      },
      level = {
        \str_gset:Nn
          \g_istqb_level_str
          { #1 }
      },
      title = {
        \str_gset:Nn
          \g_istqb_title_str
          { #1 }
      },
      code = {
        \str_gset:Nn
          \g_istqb_code_str
          { #1 }
      },
      version = {
        \str_gset:Nn
          \g_istqb_version_str
          { #1 }
      },
      date = {
        \str_gset:Nn
          \g_istqb_date_str
          { #1 }
      },
      release = {
        \str_gset:Nn
          \g_istqb_release_str
          { #1 }
      },
    },
    renderers = {
      jekyllDataEnd = {},
    },
  }

% Images
\markdownSetup
  {
    linkAttributes,
    rendererPrototypes = {
      image = {
        \begin{figure}
          \centering
          \includegraphics { #3 }
          \tl_if_empty:nF
            { #4 }
            { \caption { #4 } }
          \tl_set:Nx
            \l_tmpa_tl
            {
              \str_lowercase:n
                { figure:#1 }
            }
          \exp_args:NV
            \label
            \l_tmpa_tl
        \end{figure}
      },
      imageAttributeContextBegin = {
        \group_begin:
        \markdownSetup
          {
            renderers = {
              attributeKeyValue = {
                \setkeys  % Pass the key-value
                { Gin } % to graphicx package
                { { ##1 } = { ##2 } }
              },
            },
          }
      },
      imageAttributeContextEnd = {
        \group_end:
      },
    },
  }

% Headings
\seq_new:N \l_istqb_header_identifiers_seq
\markdownSetup
  {
    headerAttributes,
    tightLists=false,
    startNumber=false,
    rendererPrototypes = {
      headerAttributeContextBegin = {
        \markdownSetup
          {
            rendererPrototypes = {
              attributeClassName = {
                %% Unnumbered sections
                \tl_if_eq:nnT
                  { ##1 }
                  { unnumbered }
                  {
                    \markdownSetup
                      {
                        rendererPrototypes = {
                          headingOne = {
                            \section * { ####1 }
                            \addcontentsline { toc } { section } { ####1 }
                            \markboth { ####1 } { ####1 }
                          },
                        }
                      }
                  }
                %% Learning objectives
                \tl_if_eq:nnT
                  { ##1 }
                  { learning-objectives }
                  {
                    \group_begin:
                    \begin { istqb objectives }
                    \markdownSetup
                      {
                        rendererPrototypes = {
                          olBegin = {
                            \group_begin:
                            \markdownSetup
                              {
                                rendererPrototypes = {
                                  olBegin = {
                                    \group_begin:
                                    \markdownSetup
                                      {
                                        rendererPrototypes = {
                                          olItem = {
                                            \def\next################################1\markdownRendererOlItemEnd
                                              {
                                                \istqbsubobjective { ################################1 }
                                                \markdownRendererOlItemEnd
                                              }
                                            \next
                                          },
                                          olEnd = {
                                            \end { istqb subobjectives }
                                            \group_end:
                                          },
                                        }
                                      }
                                    \begin { istqb subobjectives }
                                  },
                                  olItem = {
                                    \def\next################1\markdownRendererInterblockSeparator
                                      {
                                        \istqbobjective { ################1 }
                                        \markdownRendererInterblockSeparator
                                      }
                                    \next
                                  },
                                  olEnd = {
                                    \group_end:
                                    \end { istqb objectives }
                                  },
                                }
                              }
                          },
                          headerAttributeContextEnd = {
                            \group_end:
                          },
                        }
                      }
                  }
              },
              attributeIdentifier = {
                \group_begin:
                \def\next####1{
                  \def####1########1
                    {
                      \group_end:
                      ####1 { ########1 }
                      \label { section:##1 }
                    }
                }
                \next\markdownRendererHeadingOne
                \next\markdownRendererHeadingTwo
                \next\markdownRendererHeadingThree
                \next\markdownRendererHeadingFour
                \next\markdownRendererHeadingFive
                \next\markdownRendererHeadingSix
              },
            },
          }
      },
      headerAttributeContextEnd = {},
    },
  }

% Tables
\RequirePackage{booktabs}
\markdownSetup
  {
    pipeTables,
    tableCaptions,
  }

% Relative references
\PassOptionsToPackage{nameinlink}{cleveref}
\RequirePackage{cleveref}
\markdownSetup
  {
    relativeReferences,
  }
\renewcommand
  \markdownLaTeXRendererDirectOrIndirectLink[4]
  {
    % If the URL begins with a hash sign, then we assume that it is a relative
    % reference. Otherwise, we assume that it is an absolute URL.
    \tl_set:Nn
      \l_tmpa_tl
      { #3 }
    \tl_trim_spaces:N
      \l_tmpa_tl
    \tl_set:Nx
      \l_tmpb_tl
      {
        \tl_range:Nnn
          \l_tmpa_tl
          { 1 }
          { 1 }
      }
    \str_if_eq:NNTF
      \l_tmpb_tl
      \c_hash_str
      {
        \tl_set:Nx
          \l_tmpb_tl
          {
            \tl_range:Nnn
              \l_tmpa_tl
              { 2 }
              { -1 }
          }
        \tl_set:Nx
          \l_tmpa_tl
          {
            [
              \str_lowercase:V
                \l_tmpb_tl
            ]
          }
        \emph
          {
            \exp_last_unbraced:NV
              \hyperref
              \l_tmpa_tl
              { #1 }
          }
      }{
        \emph { \href { #3 } { #1 } }
      }
  }
\renewcommand
  \markdownLaTeXRendererAutolink[2]
  {
    % If the URL begins with a hash sign, then we assume that it is a relative
    % reference. Otherwise, we assume that it is an absolute URL.
    \tl_set:Nn
      \l_tmpa_tl
      { #2 }
    \tl_trim_spaces:N
      \l_tmpa_tl
    \tl_set:Nx
      \l_tmpb_tl
      {
        \tl_range:Nnn
          \l_tmpa_tl
          { 1 }
          { 1 }
      }
    \str_if_eq:NNTF
      \l_tmpb_tl
      \c_hash_str
      {
        \tl_set:Nx
          \l_tmpb_tl
          {
            \tl_range:Nnn
              \l_tmpa_tl
              { 2 }
              { -1 }
          }
        \tl_set:Nx
          \l_tmpa_tl
          {
            \str_lowercase:V
              \l_tmpb_tl
          }
        \emph
          {
            \exp_args:NV
              \Cref
              \l_tmpa_tl
          }
      }{
        \emph { \url { #2 } }
      }
}
\cs_generate_variant:Nn
  \str_lowercase:n
  { V }

% Bibliography
\markdownSetup
  {
    citations,
  }

% Index
\markdownSetup
  {
    bracketedSpans,
    rendererPrototypes = {
      bracketedSpanAttributeContextBegin = {
        \group_begin:
        \markdownSetup
          {
            rendererPrototypes = {
              attributeClassName = {
                \str_if_eq:nnT
                  { ##1 }
                  { index }
                  {
                    \def\next####1\markdownRendererBracketedSpanAttributeContextEnd
                      {
                        \global\index { ####1 }
                        ####1
                        \markdownRendererBracketedSpanAttributeContextEnd
                      }
                    \next
                  }
              },
            }
          }
      },
      bracketedSpanAttributeContextEnd = {
        \group_end:
      },
    }
  }