name: Build LaTeX documents
on:
  - workflow_call
permissions:
  contents: write
env:
  DEBIAN_FRONTEND: noninteractive
  TEXINPUTS: '.:./istqb_product_base/template:'
jobs:
  validate:
    name: Validate YAML documents
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install required packages
        run: |
          set -ex
          apt -qy update
          apt -qy install --no-install-recommends parallel python3 python3-pip
          pip3 install yamale~=4.0.4
      - name: Validate metadata.yml
        shell: bash
        run: find -follow \( -not -regex '^\./istqb_product_base/.*' \) -type f -iregex '.*/metadata\.yml$' | parallel --halt now,fail=1 yamale --schema=istqb_product_base/schema/metadata.yml {}
      - name: Validate questions.yml
        shell: bash
        run: find -follow \( -not -regex '^\./istqb_product_base/.*' \) -type f -iregex '.*/questions\.yml$' | parallel --halt now,fail=1 yamale --schema=istqb_product_base/schema/questions.yml {}
  produce-pdf:
    name: Produce PDF documents
    needs:
      - validate
    runs-on: ubuntu-latest
    container:
      image: witiko/markdown:3.2.0-43-gc109d22b-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install required packages
        run: |
          set -ex
          apt -qy update
          apt -qy install --no-install-recommends dos2unix libreoffice parallel
      - name: Ensure correct encoding of input files
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) \( -iregex '.*\.md$' -o -iregex '.*\.yml$' \) -exec dos2unix {} +
      - name: Convert EPS images to PDF
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.eps$' | parallel --halt now,fail=1 epstopdf {} {.}-eps-converted-to.pdf
      - name: Convert XLSX spreadsheets to PDF
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.xlsx$' | parallel --halt now,fail=1 libreoffice --headless --convert-to pdf {} --outdir {//}
      - name: Compile LaTeX documents to PDF
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.tex$' | parallel --halt now,fail=1 test -e {//}/NO_PDF '||' latexmk -r istqb_product_base/latexmkrc {}
      - name: Upload PDF documents
        uses: actions/upload-artifact@v3
        with:
          name: PDF
          path: '*.pdf'
  produce-html:
    name: Produce HTML documents
    needs:
      - validate
    runs-on: ubuntu-latest
    container:
      image: witiko/markdown:3.2.0-0-g034c66fb-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install required packages
        run: |
          set -ex
          apt -qy update
          apt -qy install --no-install-recommends dos2unix libreoffice parallel tidy
      - name: Ensure correct encoding of input files
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) \( -iregex '.*\.md$' -o -iregex '.*\.yml$' \) -exec dos2unix {} +
      - name: Convert XLSX spreadsheets to PDF
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.xlsx$' | parallel --halt now,fail=1 libreoffice --headless --convert-to pdf {} --outdir {//}
      - name: Create output directory html/
        run: mkdir html
      - name: Compile LaTeX documents to HTML
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.tex$' | parallel --halt now,fail=1 test -e {.}/NO_HTML '||' make4ht -s -c istqb_product_base/istqb.cfg -e istqb_product_base/istqb.mk4 -d html/{.} {}
      - name: Upload HTML documents
        uses: actions/upload-artifact@v3
        with:
          name: HTML
          path: html
  produce-ebooks:
    name: Produce EPUB documents
    needs:
      - validate
    runs-on: ubuntu-latest
    container:
      image: witiko/markdown:3.2.0-0-g034c66fb-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install required packages
        run: |
          set -ex
          apt -qy update
          apt -qy install --no-install-recommends dos2unix libreoffice parallel tidy
      - name: Ensure correct encoding of input files
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) \( -iregex '.*\.md$' -o -iregex '.*\.yml$' \) -exec dos2unix {} +
      - name: Convert XLSX spreadsheets to PDF
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.xlsx$' | parallel --halt now,fail=1 libreoffice --headless --convert-to pdf {} --outdir {//}
      - name: Create output directory epub/
        run: mkdir epub
      - name: Compile LaTeX documents to EPUB
        shell: bash
        run: |
          set -ex
          shopt -s extglob
          find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.tex$' | parallel --halt now,fail=1 test -e {.}/NO_HTML '||' '(' mkdir -p epub/build/{.} '&&' cp -ar !(epub) epub/build/{.}/ '&&' cd epub/build/{.} '&&' tex4ebook -s -c istqb_product_base/istqb.cfg -e istqb_product_base/istqb.mk4 -d ../.. {} ')'
          rm -rf epub/build
      - name: Upload EPUB documents
        uses: actions/upload-artifact@v3
        with:
          name: EPUB
          path: epub
  produce-docx:
    name: Produce DOCX documents
    needs:
      - validate
    runs-on: ubuntu-latest
    container:
      image: pandoc/core:3.1.1.0-ubuntu
    env:
      PANDOC_EXTENSIONS: commonmark+bracketed_spans+fancy_lists+pipe_tables+raw_attribute
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install required packages
        run: |
          set -ex
          apt -qy update
          apt -qy install --no-install-recommends parallel
      - name: Create output directory docx/
        run: mkdir docx
      - name: Convert MD documents to DOCX
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.md$'  | parallel --halt now,fail=1 mkdir -p docx/{//} '&&' pandoc -f "${PANDOC_EXTENSIONS}" -i {} -o docx/{}.docx
      - name: Convert YAML documents to DOCX
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.yml$' | parallel --halt now,fail=1 mkdir -p docx/{//} '&&' sed -e '1s/^/``` yml\n/' -e '$s/$/\n```/' {} | pandoc -f "${PANDOC_EXTENSIONS}+hard_line_breaks" -i - -o docx/{}.docx
      - name: Convert BIB documents to DOCX
        run: find -type f -follow \( -not -regex '^\./istqb_product_base/.*' \) -iregex '.*\.bib$' | parallel --halt now,fail=1 mkdir -p docx/{//} '&&' sed -e '1s/^/``` bib\n/' -e '$s/$/\n```/' {} | pandoc -f "${PANDOC_EXTENSIONS}+hard_line_breaks" -i - -o docx/{}.docx
      - name: Upload DOCX documents
        uses: actions/upload-artifact@v3
        with:
          name: DOCX
          path: docx
