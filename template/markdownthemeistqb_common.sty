\NeedsTeXFormat{LaTeX2e}
\ProvidesExplPackage
  {markdownthemeistqb_common}%
  {2023-10-16}%
  {0.0.1}%
  {LaTeX theme for the Markdown Package that contains common code for different types of ISTQB documents}

% Hybrid Markdown + LaTeX text
\markdownSetup
  {
    fencedCode,
    rawAttribute,
    renderers = {
      inputRawInline = {
        \protect  % Enable the use of raw inlines in headings.
          \texorpdfstring
            { \protect \markdownEscape { #1 } \unskip }
            { (raw~#2~code) }
      }
    },
  }

% Paragraphs and line breaks
\markdownSetup
  {
    renderers = {
      hardLineBreak = { \\ },
    }
  }

% Lists
\markdownSetup
  {
    hashEnumerators,
    tightLists = false,
  }

% Subscripts and superscripts
\markdownSetup
  {
    subscripts = true,
    superscripts = true,
  }

% Language
\cs_new:Nn
  \istqb_load_language:n
  {
    \markdownInput
      [ snippet = istqb / common / language ]
      { istqb_product_base / languages / #1.yml }
  }
\tl_new:N \l_istqb_anguage_current_position
\prop_new:N \g_istqb_language_prop
\markdownSetupSnippet
  { language }
  {
    jekyllData,
    expectJekyllData,
    renderers = {
      jekyllData(Sequence|Mapping)Begin = {
        \str_if_eq:nnF
          { #1 }
          { null }
          {
            \tl_gset:Nn
              \l_istqb_language_current_position
              { #1 / }
          }
      },
      jekyllData(Begin|(Sequence|Mapping)End) = {
        \tl_clear:N
          \l_istqb_language_current_position
      },
      jekyllDataString = {
        \tl_set:Nx
          \l_tmpa_tl
          { { \l_istqb_language_current_position #1 } = }
        \tl_put_right:Nn
          \l_tmpa_tl
          { { #2 } }
        \keys_set:nV
          { istqb / language }
          \l_tmpa_tl
      },
      jekyllDataEnd = { },
    },
  }
\RequirePackage{etoolbox}
\tl_new:N \g_istqb_babel_language_tl
\keys_define:nn
  { istqb / language }
  {
    babel-language .code:n = {
      \tl_gset:Nn
        \g_istqb_babel_language_tl
        { #1 }
      \BeforeBeginEnvironment
        { document }
        {
          \RequirePackage
            [
              main = \g_istqb_babel_language_tl,
              shorthands = off,
            ]
            { babel }
        }
    },
    further-reading .tl_gset:N = \istqbfurtherreadingname,
    istqb .tl_gset:N = \istqborgname,
  }
\keys_define:nn
  { istqb / language / bibliography-subsections }
  {
    standards .tl_gset:N = \istqbstandardsname,
    documents .tl_gset:N = \istqbdocumentsname,
    books .tl_gset:N = \istqbbooksname,
    articles .tl_gset:N = \istqbarticlesname,
  }
\keys_define:nn
  { istqb / language / page }
  {
    1 .tl_gset:N = \istqbpagename,
    2 .tl_gset:N = \istqboutofname,
  }
\keys_define:nn
  { istqb / language / provided-by }
  {
    1 .tl_gset:N = \istqbprovidedbysingularname,
    2 .tl_gset:N = \istqbprovidedbypluralname,
  }
\tl_new:N \g_istqb_list_delimiter_two
\tl_new:N \g_istqb_list_delimiter_many
\tl_new:N \g_istqb_list_delimiter_last
\keys_define:nn
  { istqb / language / list-delimiters }
  {
    1 .code:n = {
      \tl_set:Nn
        \l_tmpa_tl
        { #1 }
      \regex_match:nnF
        { ^, }
        { #1 }
        {
          \tl_put_left:Nn
            \l_tmpa_tl
            { ~ }
        }
      \tl_put_right:Nn
        \l_tmpa_tl
        { ~ }
      \tl_gset:NV
        \g_istqb_list_delimiter_two
        \l_tmpa_tl
    },
    2 .code:n = {
      \tl_set:Nn
        \l_tmpa_tl
        { #1 }
      \regex_match:nnF
        { ^, }
        { #1 }
        {
          \tl_put_left:Nn
            \l_tmpa_tl
            { ~ }
        }
      \tl_put_right:Nn
        \l_tmpa_tl
        { ~ }
      \tl_gset:NV
        \g_istqb_list_delimiter_many
        \l_tmpa_tl
    },
    3 .code:n = {
      \tl_set:Nn
        \l_tmpa_tl
        { #1 }
      \regex_match:nnF
        { ^, }
        { #1 }
        {
          \tl_put_left:Nn
            \l_tmpa_tl
            { ~ }
        }
      \tl_put_right:Nn
        \l_tmpa_tl
        { ~ }
      \tl_gset:NV
        \g_istqb_list_delimiter_last
        \l_tmpa_tl
    },
  }
\prop_new:N \g_istqb_reference_labels_prop
\keys_define:nn
  { istqb / language / reference-labels }
  {
    unknown .code:n = {
      \prop_gput:NVn
        \g_istqb_reference_labels_prop
        \l_keys_key_str
        { #1 }
    },
  }

% Metadata
\tl_new:N
  \g_istqb_language_tl
\tl_gset:Nn
  \g_istqb_language_tl
  { en }
\keys_define:nn
  { istqb / metadata }
  {
    schema .tl_gset:N = \g_istqb_schema_tl,
    level .tl_gset:N = \g_istqb_level_tl,
    type .tl_gset:N = \g_istqb_type_tl,
    title .tl_gset:N = \g_istqb_title_tl,
    code .tl_gset:N = \g_istqb_code_tl,
    version .tl_gset:N = \g_istqb_version_tl,
    date .tl_gset:N = \g_istqb_date_tl,
    release .tl_gset:N = \g_istqb_release_tl,
    prefix .tl_gset:N = \g_istqb_prefix_tl,
    logo .tl_gset:N = \g_istqb_logo_tl,
    compatibility .tl_gset:N = \g_istqb_compatibility_tl,
    language .tl_gset:N = \g_istqb_language_tl,
  }
\tl_new:N \l_istqb_current_third_party_name_tl
\tl_new:N \l_istqb_current_third_party_logo_tl
\markdownSetupSnippet
  { metadata }
  {
    jekyllData,
    expectJekyllData,
    renderers = {
      jekyllData(String|Number) = {
        \keys_set:nn
          { istqb/metadata }
          { { #1 } = { #2 } }
      },
      jekyllDataSequenceBegin = {
        \str_case:nn
          { #1 }
          {
            { provided-by } {
              % A third-party organization
              \group_begin:
              \markdownSetup
                {
                  renderers = {
                    jekyllData(String|Number) = {
                      % A short definition of a third-party organization
                      \seq_gput_right:Nn
                        \g_istqb_third_parties_seq
                        { ##2 }
                    },
                    jekyllDataMappingBegin = {
                      % A verbose definition of a third-party organization
                      \group_begin:
                      \markdownSetup
                        {
                          renderers = {
                            jekyllData(String|Number) = {
                              \str_case:nn
                                { ####1 }
                                {
                                  { name } {
                                    \tl_set:Nn
                                      \l_istqb_current_third_party_name_tl
                                      { ####2 }
                                  }
                                  { logo } {
                                    \tl_set:Nn
                                      \l_istqb_current_third_party_logo_tl
                                      { ####2 }
                                  }
                                }
                            },
                            jekyllDataMappingEnd = {
                              \seq_gput_right:NV
                                \g_istqb_third_parties_seq
                                \l_istqb_current_third_party_name_tl
                              \tl_if_empty:VF
                                \l_istqb_current_third_party_logo_tl
                                {
                                  \prop_gput:NVV
                                    \g_istqb_third_party_logos_prop
                                    \l_istqb_current_third_party_name_tl
                                    \l_istqb_current_third_party_logo_tl
                                }
                              \group_end:
                            },
                          },
                        }
                    },
                    jekyllDataSequenceEnd = { \group_end: },
                  },
                }
            }
          }
      },
      jekyllDataEnd = {
        \istqb_load_language:V
          \g_istqb_language_tl
      },
    },
  }
\cs_generate_variant:Nn
  \istqb_load_language:n
  { V }

% Images
\markdownSetup
  {
    linkAttributes,
    rendererPrototypes = {
      image = {
        \bool_if:NTF
          \g_istqb_intable_bool
          { \includegraphics { #3 } }
          {
            \begin{figure}
              \centering
              \includegraphics { #3 }
              \tl_if_empty:nF
                { #4 }
                { \caption { #4 } }
              \tl_set:Nx
                \l_tmpa_tl
                {
                  \str_lowercase:n
                    { figure:#1 }
                }
              \exp_args:NV
                \label
                \l_tmpa_tl
            \end{figure}
          }
      },
      imageAttributeContextBegin = {
        \group_begin:
        \markdownSetup
          {
            renderers = {
              attributeKeyValue = {
                \setkeys  % Pass the key-value
                { Gin } % to graphicx package
                { { ##1 } = { ##2 } }
              },
            },
          }
      },
      imageAttributeContextEnd = {
        \group_end:
      },
    },
  }

% Paragraphs
\cs_gset_eq:NN
  \markdownRendererParagraphSeparator
  \markdownRendererInterblockSeparator

% Headings
\seq_new:N \l_istqb_header_identifiers_seq
\markdownSetup
  {
    headerAttributes,
    rendererPrototypes = {
      headingFour = {
        \paragraph { #1 }
        \leavevmode
      },
      headerAttributeContextBegin = {
        \markdownSetup
          {
            rendererPrototypes = {
              attributeClassName = {
                %% Unnumbered sections
                \tl_if_eq:nnT
                  { ##1 }
                  { unnumbered }
                  {
                    \group_begin:
                    \markdownSetup
                      {
                        %% Stop numbering all levels of sections.
                        rendererPrototypes = {
                          headingOne = {
                            \istqbunnumberedsection { ####1 }
                          },
                          headingTwo = {
                            \istqbunnumberedsubsection { ####1 }
                          },
                          headingThree = {
                            \istqbunnumberedsubsubsection { ####1 }
                          },
                          %% Count the number of nested sections, so that we only start numbering
                          %% sections again when the top-level unnumbered section has ended.
                          sectionBegin = {
                            \group_begin:
                          },
                          sectionEnd = {
                            \group_end:
                          },
                        }
                      }
                  }
                %% Landscape sections
                \tl_if_eq:nnT
                  { ##1 }
                  { landscape }
                  {
                    \istqblandscapebegin
                    \markdownSetup
                      {
                        rendererPrototypes = {
                          sectionBegin = {
                            %% Prevent nested sections from ending landscape mode prematurely.
                            \group_begin:
                            \markdownSetup
                              {
                                rendererPrototypes = {
                                  sectionBegin = { \group_begin: },
                                  sectionEnd = { \group_end: },
                                },
                              }
                          },
                          sectionEnd = {
                            \istqblandscapeend
                          },
                        }
                      }
                  }
                %% Revision history
                \tl_if_eq:nnT
                  { ##1 }
                  { revision-history }
                  {
                    \group_begin:
                    \def \markdownLaTeXRenderTableRow ####1
                      {
                        \markdownLaTeXColumnCounter = 0
                        \ifnum \markdownLaTeXRowCounter = 0 \relax
                          \markdownLaTeXReadAlignments ####1
                          \markdownLaTeXTable = \expandafter \expandafter \expandafter {
                            \expandafter \the \expandafter \markdownLaTeXTable \expandafter {
                              \the \markdownLaTeXTableAlignment } }
                        \else
                          \markdownLaTeXRenderTableCell ####1
                        \fi
                        \advance \markdownLaTeXRowCounter by 1 \relax
                        \ifnum \markdownLaTeXRowCounter > \markdownLaTeXRowTotal \relax
                          \addto@hook
                            \markdownLaTeXTable
                            { \end { istqbrevisionhistory } }
                          \the \markdownLaTeXTable
                          \expandafter \@gobble
                        \fi \markdownLaTeXRenderTableRow
                      }
                    \def \markdownLaTeXReadAlignments ####1
                      {
                        \advance \markdownLaTeXColumnCounter by 1 \relax
                        % Ignore alignment information, since the alignment in revision history is predetermined.
                        \ifnum\markdownLaTeXColumnCounter < \markdownLaTeXColumnTotal \relax \else
                          \expandafter \@gobble
                        \fi \markdownLaTeXReadAlignments
                      }
                    \markdownSetup
                      {
                        rendererPrototypes = {
                          table = {
                            \markdownLaTeXTable = { }
                            \markdownLaTeXTableAlignment = { }
                            \addto@hook
                              \markdownLaTeXTable
                              { \begin { istqbrevisionhistory } }
                            \markdownLaTeXRowCounter = 0
                            \markdownLaTeXRowTotal = ####2
                            \markdownLaTeXColumnTotal = ####3
                            \markdownLaTeXRenderTableRow
                          },
                          sectionEnd = {
                            \group_end:
                          },
                        }
                      }
                  }
                %% Learning objectives
                \tl_if_eq:nnT
                  { ##1 }
                  { learning-objectives }
                  {
                    \group_begin:
                    \markdownSetup
                      {
                        rendererPrototypes = {
                          olBegin = {
                            \group_begin:
                            \markdownSetup
                              {
                                rendererPrototypes = {
                                  olBegin = {
                                    \group_begin:
                                    \markdownSetup
                                      {
                                        rendererPrototypes = {
                                          olItemWithNumber = {
                                            \def\next################################1\markdownRendererOlItemEnd
                                              {
                                                \istqbsubobjective { ################################1 }
                                                \markdownRendererOlItemEnd
                                              }
                                            \next
                                          },
                                          olEnd = {
                                            \end { istqb subobjectives }
                                            \group_end:
                                          },
                                        }
                                      }
                                    \begin { istqb subobjectives }
                                  },
                                  olItemWithNumber = {
                                    \def\next################1\markdownRendererInterblockSeparator
                                      {
                                        \istqbobjective { ################1 }
                                        \markdownRendererInterblockSeparator
                                      }
                                    \next
                                  },
                                  olEnd = {
                                    \end { istqb objectives }
                                    \group_end:
                                  },
                                }
                              }
                          },
                          sectionEnd = {
                            \clearpage
                            \group_end:
                          },
                        }
                      }
                    \begin { istqb objectives }
                  }
              },
              attributeIdentifier = {
                \group_begin:
                \def\next####1{
                  \def####1########1
                    {
                      \group_end:
                      ####1 { ########1 }
                      \label { section:##1 }
                    }
                }
                \next\markdownRendererHeadingOne
                \next\markdownRendererHeadingTwo
                \next\markdownRendererHeadingThree
                \next\markdownRendererHeadingFour
                \next\markdownRendererHeadingFive
                \next\markdownRendererHeadingSix
              },
            },
          }
      },
      headerAttributeContextEnd = {},
    },
  }

% Tables
\def \markdownLaTeXRenderTableRow #1
  {
    \markdownLaTeXColumnCounter = 0
    \ifnum \markdownLaTeXRowCounter = 0 \relax
      \markdownLaTeXReadAlignments #1
      \markdownLaTeXTable = \expandafter \expandafter \expandafter {
        \expandafter \the \expandafter \markdownLaTeXTable \expandafter {
          \the \markdownLaTeXTableAlignment } }
    \else
      \markdownLaTeXRenderTableCell #1
    \fi
    \advance \markdownLaTeXRowCounter by 1 \relax
    \ifnum \markdownLaTeXRowCounter > \markdownLaTeXRowTotal \relax
      \markdownLaTeXTable = \expandafter \expandafter \expandafter {
        \expandafter \the \expandafter \markdownLaTeXTable
          \the \markdownLaTeXTableEnd }
      \the \markdownLaTeXTable
      \expandafter \@gobble
    \fi \markdownLaTeXRenderTableRow
  }
\def \markdownLaTeXReadAlignments #1
  {
    \advance \markdownLaTeXColumnCounter by 1 \relax
    \if #1 d
      \addto@hook \markdownLaTeXTableAlignment { X| }
    \else
      \addto@hook \markdownLaTeXTableAlignment { #1| }
    \fi
    \ifnum\markdownLaTeXColumnCounter < \markdownLaTeXColumnTotal \relax \else
      \expandafter \@gobble
    \fi \markdownLaTeXReadAlignments
  }
\def \markdownLaTeXRenderTableCell #1
  {
    \advance \markdownLaTeXColumnCounter by 1 \relax
    \ifnum \markdownLaTeXColumnCounter < \markdownLaTeXColumnTotal \relax
      \addto@hook
        \markdownLaTeXTable
        { #1 & }
    \else
      \addto@hook
        \markdownLaTeXTable
        { #1 \\ \hline }
      \expandafter \@gobble
    \fi \markdownLaTeXRenderTableCell
  }
\bool_new:N \g_istqb_intable_bool
\tl_new:N \l_istqb_table_identifier_tl
\markdownSetup
  {
    pipeTables,
    tableCaptions,
    tableAttributes,
    rendererPrototypes = {
      tableAttributeContextBegin = {
        \group_begin:
        \markdownSetup
          {
            rendererPrototypes = {
              attributeIdentifier = {
                \tl_set:Nx
                  \l_istqb_table_identifier_tl
                  {
                    \str_lowercase:n
                      { table:##1 }
                  }
              },
            },
          }
      },
      table = {
        \bool_gset_true:N
          \g_istqb_intable_bool
        \markdownLaTeXTable = { }
        \markdownLaTeXTableAlignment = { | }
        \markdownLaTeXTableEnd = {
          \end { istqbtable }
          \bool_gset_false:N
            \g_istqb_intable_bool
        }
        \tl_if_empty:nF
          { #1 }
          {
            \addto@hook
              \markdownLaTeXTable
              {
                \begin { table }
                \centering
              }
            \addto@hook
              \markdownLaTeXTableEnd
              {
                \caption { #1 }
              }
            \tl_if_empty:NF
              \l_istqb_table_identifier_tl
              {
                \addto@hook
                  \markdownLaTeXTableEnd
                  {
                    \label
                      { \l_istqb_table_identifier_tl }
                  }
              }
            \addto@hook
              \markdownLaTeXTableEnd
              {
                \end { table }
              }
          }
        \addto@hook
          \markdownLaTeXTable
          { \begin { istqbtable } }
        \markdownLaTeXRowCounter = 0
        \markdownLaTeXRowTotal = #2
        \markdownLaTeXColumnTotal = #3
        \markdownLaTeXRenderTableRow
      },
      tableAttributeContextEnd = {
        \group_end:
      },
    }
  }

% Relative references
\markdownSetup
  {
    relativeReferences,
  }
\renewcommand
  \markdownLaTeXRendererDirectOrIndirectLink[4]
  {
    %% If the URL begins with a hash sign, then we assume that it is a relative
    %% reference. Otherwise, we assume that it is an absolute URL.
    \tl_set:Nn
      \l_tmpa_tl
      { #3 }
    \tl_trim_spaces:N
      \l_tmpa_tl
    \tl_set:Nx
      \l_tmpb_tl
      {
        \tl_range:Nnn
          \l_tmpa_tl
          { 1 }
          { 1 }
      }
    \str_if_eq:NNTF
      \l_tmpb_tl
      \c_hash_str
      {
        \tl_set:Nx
          \l_tmpb_tl
          {
            \tl_range:Nnn
              \l_tmpa_tl
              { 2 }
              { -1 }
          }
        \tl_set:Nx
          \l_tmpa_tl
          {
            [
              \str_lowercase:V
                \l_tmpb_tl
            ]
          }
        \emph
          {
            \exp_last_unbraced:NV
              \hyperref
              \l_tmpa_tl
              { #1 }
          }
      }{
        \emph { \href { #3 } { #1 } }
      }
  }
\tl_new:N \l_istqb_reference_label_tl
\tl_new:N \l_istqb_reference_number_tl
\renewcommand
  \markdownLaTeXRendererAutolink[2]
  {
    %% If the URL begins with a hash sign, then we assume that it is a relative
    %% reference. Otherwise, we assume that it is an absolute URL.
    \tl_set:Nn
      \l_tmpa_tl
      { #2 }
    \tl_trim_spaces:N
      \l_tmpa_tl
    \tl_set:Nx
      \l_tmpb_tl
      {
        \tl_range:Nnn
          \l_tmpa_tl
          { 1 }
          { 1 }
      }
    \str_if_eq:NNTF
      \l_tmpb_tl
      \c_hash_str
      {
        \tl_set:Nx
          \l_tmpb_tl
          {
            \tl_range:Nnn
              \l_tmpa_tl
              { 2 }
              { -1 }
          }
        \tl_set:Nx
          \l_tmpa_tl
          {
            \str_lowercase:V
              \l_tmpb_tl
          }
        \tl_set:NV
          \l_istqb_reference_label_tl
          \l_tmpa_tl
        \regex_replace_once:nnN
          { :.* }
          { }
          \l_istqb_reference_label_tl
        \prop_get:NVN
          \g_istqb_reference_labels_prop
          \l_istqb_reference_label_tl
          \l_istqb_reference_label_tl
        \tl_put_right:NV
          \l_tmpb_tl
          \l_istqb_reference_label_tl
        \tl_set:Nx
          \l_istqb_reference_number_tl
          {
            \exp_not:N \ref
              { \l_tmpa_tl }
          }
        \tl_set:Nx
          \l_tmpb_tl
          {
            \exp_not:N \emph
              {
                \exp_not:N \hyperref
                  [ \l_tmpa_tl ]
                  {
                    \l_istqb_reference_label_tl
                    {}~
                    \l_istqb_reference_number_tl
                  }
              }
          }
        \tl_use:N
          \l_tmpb_tl
      }{
        \emph { \url { #2 } }
      }
}
\cs_generate_variant:Nn
  \str_lowercase:n
  { V }

% Bibliography
\markdownSetup
  {
    citations,
  }

% Index
\markdownSetup
  {
    bracketedSpans,
    rendererPrototypes = {
      bracketedSpanAttributeContextBegin = {
        \group_begin:
        \markdownSetup
          {
            rendererPrototypes = {
              attributeClassName = {
                \str_if_eq:nnT
                  { ##1 }
                  { index }
                  {
                    \def\next####1\markdownRendererBracketedSpanAttributeContextEnd
                      {
                        \global\index { ####1 }
                        ####1
                        \markdownRendererBracketedSpanAttributeContextEnd
                      }
                    \next
                  }
              },
            }
          }
      },
      bracketedSpanAttributeContextEnd = {
        \group_end:
      },
    }
  }
